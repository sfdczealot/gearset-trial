/**
* ─────────────────────────────────────────────────────────────────────────────────────────────────┐
* SalesOrderStateManager class is defining Sales Order UI 
* ──────────────────────────────────────────────────────────────────────────────────────────────────
* @author         Frano Vojvodic   <frano.vojvodic@cloudsensesolutions.com>
* ──────────────────────────────────────────────────────────────────────────────────────────────────
* @changes
* vX.X            name@email.com
* YYYY-MM-DD      Explanation of the change.  Multiple lines can be used to explain the change, but
*                 each line should be indented till left aligned with the previous description text. 
* ─────────────────────────────────────────────────────────────────────────────────────────────────┘
*/
global with sharing class StandardSalesOrderStateManager implements csmso.SalesOrderAPI.SalesOrderStateManager {
    /**
     * List of all available Sales Orders statuses as static variables that are going to be referenced from other code
     */
    public static final string SO_DRAFT = 'Draft';
    public static final string SO_IN_PROGRESS = 'In Progress';
    public static final string SO_FIRST_APPROVAL = 'Pending Inventory Approval';
    public static final string SO_SECOND_APPROVAL = 'Pending Sales Approval';
    public static final string SO_THIRD_APPROVAL = 'Pending Finance Approval';    
    public static final string SO_CUSTOMER_APPROVAL_READY = 'Ready for Customer Approval';
    public static final string SO_UPDATE_PROPOSAL = 'Update Proposal/Order';
    public static final string SO_CUSTOMER_APPROVAL = 'Pending Customer Approval';    
    public static final string SO_PENDING_BOOKING = 'Pending Booking';
    public static final string SO_RESERVED = 'Reserved';
    public static final string SO_BOOKED = 'Booked';
    public static final string SO_REJECTED = 'Rejected';
    public static final string SO_RESERVE_REJECTED = 'Reservation Rejected';
    public static final string SO_RETRACTED = 'Retracted';    
    public static final string SO_KILLED = 'Killed';
    public static final string SO_PENDING = 'Pending';
    public static final string SO_PRICE_RECALCULATION_REQUIRED = 'Price Recalculation Required';
    public static final string SO_PENDING_PUSH = 'Pending Push';
    public static final string SO_CHANGED_BY_BUYER = 'Changed By Buyer';
    
    /**
     * Returns an initialized instance of the appropriate SO state manager class
     */
    private static CS_SalesOrderStateManagerBase getStateManagerForSalesOrder(csmso__Sales_Order__c so) {
        Type stateManagerType = Type.forName(so.State_Manager_Class__c);
        CS_SalesOrderStateManagerBase stateManager = (CS_SalesOrderStateManagerBase) stateManagerType.newInstance();
        stateManager.init(so);
        return stateManager;
    }
    
    public void validateChange(csmso__Sales_Order__c so) {
        CS_SalesOrderStateManagerBase stateManager = getStateManagerForSalesOrder([SELECT Id, State_Manager_Class__c FROM csmso__Sales_Order__c WHERE Id = :so.Id]);
        stateManager.init(so);
        stateManager.validateChange();
    }
    
    /**
     * Public method getFieldAttributesForSalesOrder must be defined as per csmso.SalesOrderAPI.SalesOrderStateManager interface
     */
    public Map<String, String> getFieldAttributesForSalesOrder(csmso__Sales_Order__c so) {
        CS_SalesOrderStateManagerBase stateManager = getStateManagerForSalesOrder(so);

        return stateManager.getFieldProperties();
    }
    
    public static void testCoverage(){
        integer i=0;
            i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 
     i++; 

    }
}