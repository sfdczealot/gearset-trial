@IsTest
private with sharing class DynamicMethodCall_Test {
    
    @isTest  
    private static void givenConfiguredExtensionWhenCalledThenValidResult() {
         User thisuser = [SELECT Id,Subsidiary__c FROM User WHERE country = 'Singapore' and isActive = true and profile.name = 'System Administrator' LIMIT 1];
        System.runAs(thisuser){
        string accRectype = Schema.SObjectType.Account.getRecordTypeInfosByName().get('Agent').getRecordTypeId();
        Test.starttest();
        User runUsser = [Select id, Sales_Head__c, Webuser_ID__c,Subsidiary__c From User where id =: UserInfo.getUserId()];
        Subsidiary__c sb = PGTestDataFactory.createSubsidiary();
        PGTestDataFactory_v2.CreateTriggerExecuteCS('PGAccountTrigger',true);
        Account a = new Account();
        a.RecordTypeId = accRectype; 
        a.LastName = 'PGAccount';
        a.salutation = 'Mr.';
        a.FirstName = 'abc';
        a.CurrencyIsoCode = 'SGD';
        a.Subscription_Start_Date__c = system.today().addMonths(-10);
        a.BillingStreet = 'test';
        a.BillingCity = 'test';
        a.BillingCountry = 'Singapore';
        a.BillingPostalCode = '8373';
        a.Mobile_Country__c = '65';
        a.Current_Subscription_Code__c = 'abc';
        a.Account_Rule_Code__c = 'STANDARD';
        a.AgentNet_ID__c = '123';
        a.PersonEmail = 'test@test.com';
        a.Country__c = sb.Country__c;
        a.Status__c = 'Active';
        a.OwnerId = runUsser.Id;
        a.CEA_Salesperson_Number__c = 'A6637281P';
        a.PersonBirthdate = system.today();
        insert a;
        
        Account a1 = new Account();
        a1.RecordTypeId = accRectype;
        a1.LastName = 'PGAccount';
        a1.salutation = 'Mr.';
        a1.FirstName = 'abc';
        a1.Mobile_Country__c = '65';
        a1.CurrencyIsoCode = 'SGD';
        a1.Subscription_Start_Date__c = system.today().addMonths(-10);
        a1.BillingStreet = 'test1';
        a1.BillingCity = 'test1';
        a1.BillingCountry = 'Singapore';
        a1.BillingPostalCode = '8383';
        a1.Current_Subscription_Code__c = 'abc';
        a1.Account_Rule_Code__c = 'STANDARD';
        a1.AgentNet_ID__c = '1233';
        a1.PersonEmail = 'test1@test.com';
        a1.Country__c = sb.Country__c;
        a1.Status__c = 'Active';
        a1.OwnerId = runUsser.Id;
        a1.CEA_Salesperson_Number__c = 'A6637282P';
        a1.PersonBirthdate = system.today().addMonths(1);
        insert a1;
        
        Account a2 = new Account();
        a2.RecordTypeId = accRectype;
        a2.LastName = 'PGAccount';
        a2.salutation = 'Mr.';
        a2.FirstName = 'abc';
        a2.CurrencyIsoCode = 'SGD';
        a2.Subscription_Start_Date__c = system.today().addMonths(-1);
        a2.BillingStreet = 'test2';
        a2.BillingCity = 'test2';
        a2.BillingCountry = 'Singapore';
        a2.BillingPostalCode = '8383';
        a2.Mobile_Country__c = '65';
        a2.Current_Subscription_Code__c = 'abc';
        a2.Account_Rule_Code__c = 'STANDARD';
        a2.AgentNet_ID__c = '2233';
        a2.PersonEmail = 'test12@test.com';
        a2.Country__c = sb.Country__c;
        a2.Status__c = 'Active';
        a2.OwnerId = runUsser.Id;
        a2.CEA_Salesperson_Number__c = 'A6637283P';
        a2.PersonBirthdate = system.today().addMonths(-3);
        insert a2;
        
        
        Callable extension = (Callable) Type.forName('DynamicMethodCall').newInstance();
        extension.call('multiplyNumbers', new Map<String, Object> { 'decimalValue' => null });
        extension.call('concatStrings', new Map<String, Object> { 'decimalValue' => null });
        extension.call('concatStsdsdrings', new Map<String, Object> { 'decimalValue' => null });
        extension.call('juneBirthdayStd', new Map<String, Object> { 'decimalValue' => null });
        extension.call('juneBirthdayAdvance', new Map<String, Object> { 'decimalValue' => null });
        extension.call('juneBirthdayBusPremium', new Map<String, Object> { 'decimalValue' => null });
        extension.call('AMeligible', new Map<String, Object> { 'decimalValue' => null });
        extension.call('JUNStdAM2020', new Map<String, Object> { 'decimalValue' => null });
        extension.call('JUNStdAM2020PG2', new Map<String, Object> { 'decimalValue' => null });
        new DynamicMethodCall().concatStrings('srt');
        new DynamicMethodCall().multiplyNumbers(5);
        new DynamicMethodCall().Winback();
        extension.call('januaryBirthdayStd', new Map<String, Object> { 'decimalValue' => null });
        extension.call('januaryBirthdayAdvance', new Map<String, Object> { 'decimalValue' => null });
        extension.call('januaryBirthdayBusPremium', new Map<String, Object> { 'decimalValue' => null });
        extension.call('februaryBirthdayStd', new Map<String, Object> { 'decimalValue' => null });
        extension.call('februaryBirthdayAdvance', new Map<String, Object> { 'decimalValue' => null });
        extension.call('februaryBirthdayBusPremium', new Map<String, Object> { 'decimalValue' => null });
        extension.call('marchBirthdayStd', new Map<String, Object> { 'decimalValue' => null });
        extension.call('marchBirthdayAdvance', new Map<String, Object> { 'decimalValue' => null });
        extension.call('marchBirthdayBusPremium', new Map<String, Object> { 'decimalValue' => null });
        extension.call('aprilBirthdayStd', new Map<String, Object> { 'decimalValue' => null });
        extension.call('aprilBirthdayAdvance', new Map<String, Object> { 'decimalValue' => null });
        extension.call('aprilBirthdayBusPremium', new Map<String, Object> { 'decimalValue' => null });
        extension.call('mayBirthdayStd', new Map<String, Object> { 'decimalValue' => null });
        extension.call('mayBirthdayAdvance', new Map<String, Object> { 'decimalValue' => null });
        extension.call('mayBirthdayBusPremium', new Map<String, Object> { 'decimalValue' => null });
        
        extension.call('MYNewSignupOneMonthiPower', new Map<String, Object> { 'decimalValue' => null });
        extension.call('MYNewSignupOneMonthiClassic', new Map<String, Object> { 'decimalValue' => null });
        extension.call('MYNewSignupOneMonthiStarter', new Map<String, Object> { 'decimalValue' => null });
        extension.call('MYNewSignupPromoPropexiClassic', new Map<String, Object> { 'decimalValue' => null });
        extension.call('MYNewSignupPromoPropexiBasic', new Map<String, Object> { 'decimalValue' => null });
        extension.call('MYNewSignupPromoPropexiPlatinum', new Map<String, Object> { 'decimalValue' => null });
        extension.call('MYNewSignupPromoPropexiGold', new Map<String, Object> { 'decimalValue' => null });
        extension.call('MYNewSignupLite', new Map<String, Object> { 'decimalValue' => null });
        extension.call('MYrenewalPropexPromotion', new Map<String, Object> { 'decimalValue' => null });
        extension.call('MYNewSignupPromotionTrialJuly', new Map<String, Object> { 'decimalValue' => null });
        extension.call('MYNewSignupiPPJulyOneMonth', new Map<String, Object> { 'decimalValue' => null });
        Test.stopTest();
        }
    }
    @isTest
    private static void givenConfiguredExtensionWhenCalledThenValidResult1() {
         User thisuser = [SELECT Id,Subsidiary__c FROM User WHERE country = 'Singapore' and isActive = true and profile.name = 'System Administrator' LIMIT 1];
        System.runAs(thisuser){
        string accRectype = Schema.SObjectType.Account.getRecordTypeInfosByName().get('Agent').getRecordTypeId();
        Test.starttest();
        User runUsser = [Select id, Sales_Head__c, Webuser_ID__c,Subsidiary__c From User where id =: UserInfo.getUserId()];
        Subsidiary__c sb = PGTestDataFactory.createSubsidiary();
        Account a = new Account();
        PGTestDataFactory_v2.CreateTriggerExecuteCS('PGAccountTrigger',true);
        a.RecordTypeId = accRectype;
        a.LastName = 'PGAccount';
        a.salutation = 'Mr.';
        a.FirstName = 'abc';
        a.CurrencyIsoCode = 'SGD';
        a.Subscription_Start_Date__c = system.today().addMonths(-10);
        a.BillingStreet = 'test';
        a.BillingCity = 'test';
        a.BillingCountry = 'Singapore';
        a.Mobile_Country__c = '65';
        a.BillingPostalCode = '8373';
        a.Current_Subscription_Code__c = 'abc';
        a.Account_Rule_Code__c = 'STANDARD';
        a.AgentNet_ID__c = '123';
        a.PersonEmail = 'test@test.com';
        a.Country__c = sb.Country__c;
        a.Status__c = 'Active';
        a.OwnerId = runUsser.Id;
        a.CEA_Salesperson_Number__c = 'A6637285P';
        a.PersonBirthdate = system.today();
        insert a;
        
        Account a1 = new Account();
        a1.RecordTypeId = accRectype;
        a1.LastName = 'PGAccount';
        a1.salutation = 'Mr.';
        a1.FirstName = 'abc';
        a1.CurrencyIsoCode = 'SGD';
        a1.Subscription_Start_Date__c = system.today().addMonths(-10);
        a1.BillingStreet = 'test1';
        a1.BillingCity = 'test1';
        a1.BillingCountry = 'Singapore';
        a1.BillingPostalCode = '8383';
        a1.Current_Subscription_Code__c = 'abc';
        a1.Account_Rule_Code__c = 'STANDARD';
        a1.AgentNet_ID__c = '1233';
        a1.PersonEmail = 'test1@test.com';
        a1.Country__c = sb.Country__c;
        a1.Status__c = 'Active';
        a1.Mobile_Country__c = '65';
        a1.OwnerId = runUsser.Id;
        a1.CEA_Salesperson_Number__c = 'A6637286P';
        a1.PersonBirthdate = system.today().addMonths(4);
        insert a1;
        
        Account a2 = new Account();
        a2.RecordTypeId = accRectype;
        a2.LastName = 'PGAccount';
        a2.salutation = 'Mr.';
        a2.FirstName = 'abc';
        a2.CurrencyIsoCode = 'SGD';
        a2.Subscription_Start_Date__c = system.today().addMonths(3);
        a2.BillingStreet = 'test2';
        a2.BillingCity = 'test2';
        a2.BillingCountry = 'Singapore';
        a2.Mobile_Country__c = '65';
        a2.BillingPostalCode = '8383';
        a2.Current_Subscription_Code__c = 'abc';
        a2.Account_Rule_Code__c = 'STANDARD';
        a2.AgentNet_ID__c = '2233';
        a2.PersonEmail = 'test12@test.com';
        a2.Country__c = sb.Country__c;
        a2.Status__c = 'Active';
        a2.OwnerId = runUsser.Id;
        a2.CEA_Salesperson_Number__c = 'A6637289P';
        a2.PersonBirthdate = system.today().addMonths(-3);
        insert a2;
        
        
        Callable extension = (Callable) Type.forName('DynamicMethodCall').newInstance();
        
        extension.call('juneBirthdayStd', new Map<String, Object> { 'decimalValue' => null });
        extension.call('juneBirthdayAdvance', new Map<String, Object> { 'decimalValue' => null });
        extension.call('juneBirthdayBusPremium', new Map<String, Object> { 'decimalValue' => null });
        extension.call('julyBirthdayStd', new Map<String, Object> { 'decimalValue' => null });
        extension.call('julyBirthdayAdvance', new Map<String, Object> { 'decimalValue' => null });
        extension.call('julyBirthdayBusPremium', new Map<String, Object> { 'decimalValue' => null });
        extension.call('AugustBirthdayStd', new Map<String, Object> { 'decimalValue' => null });
        extension.call('AugustBirthdayAdvance', new Map<String, Object> { 'decimalValue' => null });
        extension.call('AugustBirthdayBusPremium', new Map<String, Object> { 'decimalValue' => null });
        extension.call('septemberBirthdayStd', new Map<String, Object> { 'decimalValue' => null });
        extension.call('septemberBirthdayAdvance', new Map<String, Object> { 'decimalValue' => null });
        extension.call('septemberBirthdayBusPremium', new Map<String, Object> { 'decimalValue' => null });
        extension.call('octoberBirthdayStd', new Map<String, Object> { 'decimalValue' => null });
        extension.call('octoberBirthdayAdvance', new Map<String, Object> { 'decimalValue' => null });
        extension.call('octoberBirthdayBusPremium', new Map<String, Object> { 'decimalValue' => null });
        extension.call('novemberBirthdayStd', new Map<String, Object> { 'decimalValue' => null });
        extension.call('novemberBirthdayAdvance', new Map<String, Object> { 'decimalValue' => null });
        extension.call('novemberBirthdayBusPremium', new Map<String, Object> { 'decimalValue' => null });
        extension.call('decemberBirthdayStd', new Map<String, Object> { 'decimalValue' => null });
        extension.call('decemberBirthdayAdvance', new Map<String, Object> { 'decimalValue' => null });
        extension.call('decemberBirthdayBusPremium', new Map<String, Object> { 'decimalValue' => null });
        extension.call('AMeligible', new Map<String, Object> { 'decimalValue' => null });
        extension.call('JUNStdAM2020', new Map<String, Object> { 'decimalValue' => null });
        extension.call('JUNStdAM2020PG2', new Map<String, Object> { 'decimalValue' => null });
        extension.call('jul2020Tnr1AM_1', new Map<String, Object> { 'decimalValue' => null });
        extension.call('jul2020Tnr2AM_1', new Map<String, Object> { 'decimalValue' => null });
        extension.call('jul2020Tnr3AM_1', new Map<String, Object> { 'decimalValue' => null });
        extension.call('jul2020Tnr4AM_1', new Map<String, Object> { 'decimalValue' => null });
        extension.call('jul2020Tnr5AM_1', new Map<String, Object> { 'decimalValue' => null });
        extension.call('jul2020Tnr6AM_1', new Map<String, Object> { 'decimalValue' => null });
        extension.call('jul2020Tnr1AM', new Map<String, Object> { 'decimalValue' => null });
        extension.call('jul2020Tnr2AM', new Map<String, Object> { 'decimalValue' => null });
        extension.call('jul2020Tnr3AM', new Map<String, Object> { 'decimalValue' => null });
        extension.call('jul2020Tnr4AM', new Map<String, Object> { 'decimalValue' => null });
        extension.call('jul2020Tnr5AM', new Map<String, Object> { 'decimalValue' => null });
        extension.call('jul2020Tnr6AM', new Map<String, Object> { 'decimalValue' => null });
        extension.call('fetchMYAgentsForJuneEBCamp', new Map<String, Object> { 'decimalValue' => null });
        extension.call('fetchMYAgentsForJuneAMCamp', new Map<String, Object> { 'decimalValue' => null });
        extension.call('fetchMYAgentsForJuneAM+1Camp', new Map<String, Object> { 'decimalValue' => null });
        extension.call('fetchRenewalMYEBCommercial', new Map<String, Object> { 'decimalValue' => null });
        extension.call('fetchRenewalMYAMCommercial', new Map<String, Object> { 'decimalValue' => null });
        extension.call('fetchRenewalMYAM+1Commercial', new Map<String, Object> { 'decimalValue' => null });        
        extension.call('MYNewSignupPromotion', new Map<String, Object> { 'decimalValue' => null });
        extension.call('MYNewSignupPromotionTrial', new Map<String, Object> { 'decimalValue' => null });
        extension.call('MYNewSignupiBasic', new Map<String, Object> { 'decimalValue' => null });
        extension.call('MYNewSignupiPlatinum', new Map<String, Object> { 'decimalValue' => null });
        extension.call('MYNewSignupiGold', new Map<String, Object> { 'decimalValue' => null });
        extension.call('MYNewSignupiClassic', new Map<String, Object> { 'decimalValue' => null });
        extension.call('MYNewSignupOneMonthiBasic', new Map<String, Object> { 'decimalValue' => null });
        extension.call('MYNewSignupOneMonthiPlatinum', new Map<String, Object> { 'decimalValue' => null });
        extension.call('MYNewSignupOneMonthiGold', new Map<String, Object> { 'decimalValue' => null });
        extension.call('MYNewSignupPromotionTrialJuly', new Map<String, Object> { 'decimalValue' => null });
        extension.call('MYNewSignupiPPJulyOneMonth', new Map<String, Object> { 'decimalValue' => null });
        Test.stopTest();
        }
    }
    @isTest
    private static void givenConfiguredExtensionWhenCalledThenValidResult4() {
         User thisuser = [SELECT Id,Subsidiary__c FROM User WHERE country = 'Singapore' and isActive = true and profile.name = 'System Administrator' LIMIT 1];
        System.runAs(thisuser){
        string accRectype = Schema.SObjectType.Account.getRecordTypeInfosByName().get('Agent').getRecordTypeId();
        Test.starttest();
        User runUsser = [Select id, Sales_Head__c, Webuser_ID__c,Subsidiary__c From User where id =: UserInfo.getUserId()];
        Subsidiary__c sb = PGTestDataFactory.createSubsidiary();
        PGTestDataFactory_v2.CreateTriggerExecuteCS('PGAccountTrigger',true);
        Account a = new Account();
        a.RecordTypeId = accRectype;
        a.LastName = 'PGAccount';
        a.salutation = 'Mr.';
        a.FirstName = 'abc';
        a.CurrencyIsoCode = 'SGD';
        a.Subscription_Start_Date__c = system.today().addMonths(-10);
        a.BillingStreet = 'test';
        a.BillingCity = 'test';
        a.BillingCountry = 'Singapore';
        a.BillingPostalCode = '8373';
        a.Current_Subscription_Code__c = 'abc';
        a.Account_Rule_Code__c = 'STANDARD';
        a.AgentNet_ID__c = '123';
        a.Mobile_Country__c = '65';
        a.PersonEmail = 'test@test.com';
        a.Country__c = sb.Country__c;
        a.Status__c = 'Active';
        a.OwnerId = runUsser.Id;
        a.CEA_Salesperson_Number__c = 'A6637291P';
        a.PersonBirthdate = system.today();
        insert a;
        
        Account a1 = new Account();
        a1.RecordTypeId = accRectype;
        a1.LastName = 'PGAccount';
        a1.salutation = 'Mr.';
        a1.FirstName = 'abc';
        a1.CurrencyIsoCode = 'SGD';
        a1.Subscription_Start_Date__c = system.today().addMonths(-10);
        a1.BillingStreet = 'test1';
        a1.BillingCity = 'test1';
        a1.Mobile_Country__c = '65';
        a1.BillingCountry = 'Singapore';
        a1.BillingPostalCode = '8383';
        a1.Current_Subscription_Code__c = 'abc';
        a1.Account_Rule_Code__c = 'STANDARD';
        a1.AgentNet_ID__c = '1233';
        a1.PersonEmail = 'test1@test.com';
        a1.Country__c = sb.Country__c;
        a1.Status__c = 'Active';
        a1.OwnerId = runUsser.Id;
        a1.CEA_Salesperson_Number__c = 'A6637292P';
        a1.PersonBirthdate = system.today().addMonths(4);
        insert a1;
        
        Account a2 = new Account();
        a2.RecordTypeId = accRectype;
        a2.LastName = 'PGAccount';
        a2.salutation = 'Mr.';
        a2.Mobile_Country__c = '65';
        a2.FirstName = 'abc';
        a2.CurrencyIsoCode = 'SGD';
        a2.Subscription_Start_Date__c = system.today().addMonths(3);
        a2.BillingStreet = 'test2';
        a2.BillingCity = 'test2';
        a2.BillingCountry = 'Singapore';
        a2.BillingPostalCode = '8383';
        a2.Current_Subscription_Code__c = 'abc';
        a2.Account_Rule_Code__c = 'STANDARD';
        a2.AgentNet_ID__c = '2233';
        a2.PersonEmail = 'test12@test.com';
        a2.Country__c = sb.Country__c;
        a2.Status__c = 'Active';
        a2.OwnerId = runUsser.Id;
        a2.CEA_Salesperson_Number__c = 'A6637295P';
        a2.PersonBirthdate = system.today().addMonths(-3);
        insert a2;
        
        
        Callable extension = (Callable) Type.forName('DynamicMethodCall').newInstance();
        
        
        extension.call('jun2020Tnr1AM_1', new Map<String, Object> { 'decimalValue' => null });
        extension.call('jun2020Tnr2AM_1', new Map<String, Object> { 'decimalValue' => null });
        extension.call('jun2020Tnr3AM_1', new Map<String, Object> { 'decimalValue' => null });
        extension.call('jun2020Tnr4AM_1', new Map<String, Object> { 'decimalValue' => null });
        extension.call('jun2020Tnr5AM_1', new Map<String, Object> { 'decimalValue' => null });
        extension.call('jun2020Tnr6AM_1', new Map<String, Object> { 'decimalValue' => null });
        extension.call('mySeptSpecialistCampaign', new Map<String, Object> { 'decimalValue' => null });
        extension.call('MYNewSignupiPPJulyOneMonth', new Map<String, Object> { 'decimalValue' => null });
        Test.stopTest();
        }
    }
    @isTest
    private static void givenConfiguredExtensionWhenCalledThenValidResult3() {
         User thisuser = [SELECT Id,Subsidiary__c FROM User WHERE country = 'Singapore' and isActive = true and profile.name = 'System Administrator' LIMIT 1];
        System.runAs(thisuser){
        string accRectype = Schema.SObjectType.Account.getRecordTypeInfosByName().get('Agent').getRecordTypeId();
        Test.starttest();
        User runUsser = [Select id, Sales_Head__c, Webuser_ID__c,Subsidiary__c From User where id =: UserInfo.getUserId()];
        Subsidiary__c sb = PGTestDataFactory.createSubsidiary();
        Account a = new Account();
        PGTestDataFactory_v2.CreateTriggerExecuteCS('PGAccountTrigger',true);
        a.RecordTypeId = accRectype;
        a.LastName = 'PGAccount';
        a.salutation = 'Mr.';
        a.FirstName = 'abc';
        a.CurrencyIsoCode = 'SGD';
        a.Mobile_Country__c = '65';
        a.Subscription_Start_Date__c = system.today().addMonths(-10);
        a.BillingStreet = 'test';
        a.BillingCity = 'test';
        a.BillingCountry = 'Singapore';
        a.BillingPostalCode = '8373';
        a.Current_Subscription_Code__c = 'abc';
        a.Account_Rule_Code__c = 'STANDARD';
        a.AgentNet_ID__c = '123';
        a.PersonEmail = 'test@test.com';
        a.Country__c = sb.Country__c;
        a.Status__c = 'Active';
        a.OwnerId = runUsser.Id;
        a.CEA_Salesperson_Number__c = 'A6637297P';
        a.PersonBirthdate = system.today();
        insert a;
        
        Account a1 = new Account();
        a1.RecordTypeId = accRectype;
        a1.LastName = 'PGAccount';
        a1.salutation = 'Mr.';
        a1.FirstName = 'abc';
        a1.CurrencyIsoCode = 'SGD';
        a1.Subscription_Start_Date__c = system.today().addMonths(-10);
        a1.BillingStreet = 'test1';
        a1.BillingCity = 'test1';
        a1.BillingCountry = 'Singapore';
        a1.BillingPostalCode = '8383';
        a1.Mobile_Country__c = '65';
        a1.Current_Subscription_Code__c = 'abc';
        a1.Account_Rule_Code__c = 'STANDARD';
        a1.AgentNet_ID__c = '1233';
        a1.PersonEmail = 'test1@test.com';
        a1.Country__c = sb.Country__c;
        a1.Status__c = 'Active';
        a1.OwnerId = runUsser.Id;
        a1.CEA_Salesperson_Number__c = 'A6637298P';
        a1.PersonBirthdate = system.today().addMonths(4);
        insert a1;
        
        Account a2 = new Account();
        a2.RecordTypeId = accRectype;
        a2.LastName = 'PGAccount';
        a2.salutation = 'Mr.';
        a2.FirstName = 'abc';
        a2.CurrencyIsoCode = 'SGD';
        a2.Subscription_Start_Date__c = system.today().addMonths(3);
        a2.BillingStreet = 'test2';
        a2.BillingCity = 'test2';
        a2.BillingCountry = 'Singapore';
        a2.BillingPostalCode = '8383';
        a2.Current_Subscription_Code__c = 'abc';
        a2.Account_Rule_Code__c = 'STANDARD';
        a2.AgentNet_ID__c = '2233';
        a2.PersonEmail = 'test12@test.com';
        a2.Mobile_Country__c = '65';
        a2.Country__c = sb.Country__c;
        a2.Status__c = 'Active';
        a2.OwnerId = runUsser.Id;
        a2.CEA_Salesperson_Number__c = 'A6638292P';
        a2.PersonBirthdate = system.today().addMonths(-3);
        insert a2;
        
        Callable extension = (Callable) Type.forName('DynamicMethodCall').newInstance();
        
        extension.call('aug2020Tnr1AM_1', new Map<String, Object> { 'decimalValue' => null });
        extension.call('aug2020Tnr2AM_1', new Map<String, Object> { 'decimalValue' => null });
        extension.call('aug2020Tnr3AM_1', new Map<String, Object> { 'decimalValue' => null });
        extension.call('aug2020Tnr4AM_1', new Map<String, Object> { 'decimalValue' => null });
        extension.call('aug2020Tnr5AM_1', new Map<String, Object> { 'decimalValue' => null });
        extension.call('aug2020Tnr6AM_1', new Map<String, Object> { 'decimalValue' => null });
        extension.call('aug2020Tnr1AM', new Map<String, Object> { 'decimalValue' => null });
        extension.call('aug2020Tnr2AM', new Map<String, Object> { 'decimalValue' => null });
        extension.call('aug2020Tnr3AM', new Map<String, Object> { 'decimalValue' => null });
        extension.call('aug2020Tnr4AM', new Map<String, Object> { 'decimalValue' => null });
        extension.call('aug2020Tnr5AM', new Map<String, Object> { 'decimalValue' => null });
        extension.call('aug2020Tnr6AM', new Map<String, Object> { 'decimalValue' => null });
        extension.call('MYjul2020AM', new Map<String, Object> { 'decimalValue' => null });
        extension.call('MYaug2020AM', new Map<String, Object> { 'decimalValue' => null });
        
        extension.call('SGMidTermUpgradeMarketingPromoTNR0', new Map<String, Object> { 'decimalValue' => null });
        extension.call('SGMidTermUpgradeMarketingPromoTNR1', new Map<String, Object> { 'decimalValue' => null });
        extension.call('SGMidTermUpgradeMarketingPromoTNR2', new Map<String, Object> { 'decimalValue' => null });
        extension.call('SGMidTermUpgradeMarketingPromoTNR3', new Map<String, Object> { 'decimalValue' => null });
        extension.call('SGMidTermUpgradeMarketingPromoTNR4', new Map<String, Object> { 'decimalValue' => null });
        extension.call('SGMidTermUpgradeMarketingPromoTNR5', new Map<String, Object> { 'decimalValue' => null });
        extension.call('SGMidTermUpgradeMarketingPromoTNR6', new Map<String, Object> { 'decimalValue' => null });
        extension.call('SG_NewExpiredAgentContacts12', new Map<String, Object> { 'decimalValue' => null });
        extension.call('fetchAgentsWithSpending1k', new Map<String, Object> { 'decimalValue' => null });
        extension.call('fetchMYAgentsForEBCamp', new Map<String, Object> { 'decimalValue' => null });
        extension.call('fetchMYAgentsForAMCamp', new Map<String, Object> { 'decimalValue' => null });
        extension.call('fetchMYAgentsForAM+1Camp', new Map<String, Object> { 'decimalValue' => null });
        extension.call('fetchTHAgentsForEBCamp', new Map<String, Object> { 'decimalValue' => null });
        extension.call('fetchTHAgentsForAMCamp', new Map<String, Object> { 'decimalValue' => null });
        extension.call('fetchTHAgentsForAM+1Camp', new Map<String, Object> { 'decimalValue' => null });
        extension.call('fetchSGAgentsForTNR1Camp', new Map<String, Object> { 'decimalValue' => null });
        extension.call('fetchSGAgentsForTNR2Camp', new Map<String, Object> { 'decimalValue' => null });
        extension.call('fetchSGAgentsForTNR3Camp', new Map<String, Object> { 'decimalValue' => null });
        extension.call('fetchSGAgentsForTNR4Camp', new Map<String, Object> { 'decimalValue' => null });
        extension.call('fetchSGAgentsForTNR5Camp', new Map<String, Object> { 'decimalValue' => null });
        extension.call('fetchSGAgentsForTNR6Camp', new Map<String, Object> { 'decimalValue' => null });
        extension.call('SGMidTermUpgradeMarketingPromoTENURE0', new Map<String, Object> { 'decimalValue' => null });
        extension.call('SGMidTermUpgradeMarketingPromoTENURE1', new Map<String, Object> { 'decimalValue' => null });
        extension.call('SGMidTermUpgradeMarketingPromoTENURE2', new Map<String, Object> { 'decimalValue' => null });
        extension.call('SGMidTermUpgradeMarketingPromoTENURE3', new Map<String, Object> { 'decimalValue' => null });
        extension.call('SGMidTermUpgradeMarketingPromoTENURE4', new Map<String, Object> { 'decimalValue' => null });
        extension.call('SGMidTermUpgradeMarketingPromoTENURE5', new Map<String, Object> { 'decimalValue' => null });
        extension.call('SGMidTermUpgradeMarketingPromoTENURE6', new Map<String, Object> { 'decimalValue' => null });
        extension.call('SG_Advance_Package_Promo', new Map<String, Object> { 'decimalValue' => null });
        extension.call('SG_Advance_Package_Promo_6', new Map<String, Object> { 'decimalValue' => null });
        extension.call('SG_Advance_Package_Promo_18', new Map<String, Object> { 'decimalValue' => null });
        extension.call('SG_Advance_Package_Promo_March21', new Map<String, Object> { 'decimalValue' => null });
        extension.call('minus13Months', new Map<String, Object> { 'decimalValue' => null });
        extension.call('THDecOffer2', new Map<String, Object> { 'decimalValue' => null });
        extension.call('fetchRiangRiaRayaSaleAprBaseAgents', new Map<String, Object> { 'decimalValue' => null });
        extension.call('fetchRiangRiaRayaSaleMayBaseAgents', new Map<String, Object> { 'decimalValue' => null });
        extension.call('fetchRiangRiaRayaSaleJuneBaseAgents', new Map<String, Object> { 'decimalValue' => null });
        extension.call('fetchRiangRiaRayaSaleJulyBaseAgents', new Map<String, Object> { 'decimalValue' => null });
        extension.call('SG_Advance_Package_Promo_14', new Map<String, Object> { 'decimalValue' => null });
        extension.call('MYNewSignupPromotionTrialJuly', new Map<String, Object> { 'decimalValue' => null });
        extension.call('MYNewSignupiPPJulyOneMonth', new Map<String, Object> { 'decimalValue' => null });
        Test.stopTest(); 
        }
    } 
}